% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compareLayers.R
\name{compareLayers}
\alias{compareLayers}
\title{Compare single layers to each other}
\usage{
compareLayers(
  field1,
  field2 = field1,
  layers1,
  layers2 = layers1,
  do.seasonality = FALSE,
  keepall1 = FALSE,
  keepall2 = FALSE,
  override.quantity = FALSE,
  verbose = FALSE,
  match.NAs = FALSE,
  show.stats = TRUE,
  custom.metrics = list(),
  tolerance = NULL
)
}
\arguments{
\item{field1}{A Field from which to get the first layer for comparison. For the normalised metrics, this is the *modelled* values.}

\item{field2}{A Field from which to get the second layer for comparison. For the normalised metrics, this is the *observed* values.}

\item{layers1}{The name of the layers to be compared from field1 (character string)}

\item{layers2}{The name of the layers to be compared from field2 (character string).  If not defined taken to the be the same as layers1}

\item{do.seasonality}{Logical, if TRUE use monthly values to calculate the seasonal concentration and phase, and then return NME/NSME of the concentration and MPD 
(mean phase difference) on the phase.}

\item{keepall1}{Logical, if TRUE keep all data points in layers1 even if there is not corresponding data in layers2}

\item{keepall2}{Logical, if TRUE keep all data points in layers2 even if there is not corresponding data in layers2}

\item{override.quantity}{Logical, if TRUE ignore situation where field1 and field2 have non-identical Quantities and use the Quantity from field1 for the returned Comparison}

\item{verbose}{Logical, if TRUE print some informative output

The returned Comparison object can be plotted using \code{plotSpatialComparison} (to give the absolute difference, original values side-by-side and percentage difference, also the NME spatially - to be implemented)
The stats slot (which contains list) holds information such as RSME, NME, Nash-Sutcliffe Model Efficiency, etc. between the datasets in the case of a continous data.
In the case of comparing categorical data (ie layers of factors) it contains Cohen's Kappa.}

\item{match.NAs}{Logical, if TRUE copy NAs from one layer to the other.  This is mostly to make sure that when you later plot the data in the final Comparison side-by-side,
that the both have 'no data' (typically grey areas) plotted on both maps.}

\item{show.stats}{Logical, if TRUE print the summary statistics}

\item{custom.metrics}{A named list of functions (defined by the user) to calculate additional custom metrics.  The functions must take a data.table and 
two character vectors of layer names to be compared (in order in the case of multi-layer comparisons).  Spatial-temporal-annual column names of Lon, Lat, Year, Month and Day
can be assumed in the data.table.  The name of the item in the list is used as the metric name.}

\item{tolerance}{Numeric, passed to copyLayers. Defines how close the longitudes and latitudes of the gridcells in \code{field1} and \code{field2}
need to be to the coordinates in order to get a match.  Can be a single numeric (for the same tolerance) or a vector of two numerics (for lon and lat separately).
Default is no rounding (value is NULL) and so is fine for most regular spaced grids. However, setting this can be useful to force matching of 
coordinates with many decimal places which may have lost a small amount of precision and so don't match exactly.}
}
\value{
A Comparison object
}
\description{
Compare two layers (each from a Field) to calculated various statistic metric and also the error (at every spatial/temporal locality) which is returned as a Comparison object.
}
\examples{

\donttest{
 
##### Continuous (single-layer) comparison

# Load Saatchi data and LPJ-GUESS data over Africa

africa.dir <- system.file("extdata", "LPJ-GUESS_Runs", "CentralAfrica", package = "DGVMTools")
africa.Source <- defineSource(name = "LPJ-GUESS", dir = africa.dir,  format = GUESS)
model.cmass <- getField(source = africa.Source, var = "cmass", year.aggregate.method="mean")

Saatchi.dir <- system.file("extdata", "DGVMData", "Saatchi2011", "HD", package = "DGVMTools")
Saatchi.Source <- defineSource(name = "Saatchi Biomass", dir = Saatchi.dir,  format = DGVMData)
Saatchi.cmass <- getField(source = Saatchi.Source , var = "vegC_std") #' 

## Calculate veg C of trees in model, compare layers, and print the statistics 
model.cmass <- layerOp(model.cmass, "+", ".Tree", "Tree")
vegC.comparison <- compareLayers(field1 = model.cmass, field2 = Saatchi.cmass, layers1 = "Tree")
print(vegC.comparison@stats)

# plot maps with plotSpatialComparison
print(plotSpatialComparison(vegC.comparison)) 
print(plotSpatialComparison(vegC.comparison, type = "values"))

##### Categorical (single-layer) comparison
# classification is by Smith et al 2014
# Load Haxeltine and Prentice PNV biomes data and calculate LPJ-GUESS biomes over Europe

europe.dir <- system.file("extdata", "LPJ-GUESS_Runs", "CentralEurope", package = "DGVMTools")
europe.Source <- defineSource(name = "LPJ-GUESS", dir = europe.dir,  format = GUESS)
model.biomes <- getScheme(source = europe.Source, 
                          scheme = Smith2014BiomeScheme, 
                          year.aggregate.method="mean")

PNV.dir <- system.file("extdata", "DGVMData", "HandP_PNV", "HD", package = "DGVMTools")
PNV.Source <- defineSource(name = "H and P PNV", dir = PNV.dir,  format = DGVMData)
PNV.biomes <- getField(source = PNV.Source , var = "Smith2014")

## Compare biomes, print the statistics
biomes.comparison <- compareLayers(field1 = model.biomes, 
                                   field2 = PNV.biomes, 
                                   layers1 = "Smith2014")
print(biomes.comparison@stats)

# plotSpatialComparisons
print(plotSpatialComparison(biomes.comparison))
print(plotSpatialComparison(biomes.comparison, type = "values"))


##### Seasonal comparison

# Load monthly LPJ-GUESS LAI data over Europe for two periods

mlai.2000_2005 <-  getField(source = europe.Source, 
                            var = "mlai", 
                            year.aggregate.method = "mean", 
                            first.year = 2000, last.year = 2005)
                            
mlai.2006_2010 <-  getField(source = europe.Source, 
                            var = "mlai", 
                            year.aggregate.method = "mean", 
                            first.year = 2006, last.year = 2010)

# make comparison and show stats
seasonal.comparison <- compareLayers(field1 = mlai.2000_2005, 
                                     field2 = mlai.2006_2010, 
                                     layers1 = "mlai", 
                                     do.seasonality = TRUE, 
                                     verbose = TRUE, 
                                     show.stats = TRUE)
print(seasonal.comparison@stats)


# plotSpatialComparisons
print(plotSpatialComparison(seasonal.comparison))
print(plotSpatialComparison(seasonal.comparison, type = "values")) 



}

}
\author{
Matthew Forrest \email{matthew.forrest@senckenberg.de}
}
